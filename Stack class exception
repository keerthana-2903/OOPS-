class StackOverFlowException extends Exception{
    public String toString(){
        return "Stack is full";
    }
}
class StackUnderFlowException extends Exception{
    public String toString(){
        return "Stack is empty";
    }
}
class Stack {
    private int size;
    private int top = -1;
    private int s[];

    public Stack(int sz) {
        size = sz;
        s = new int[sz];
    }

    public void push(int x) throws StackOverFlowException {
        if (top == size - 1)
            throw new StackOverFlowException();
        top++;
        s[top] = x;
    }
    public int pop() throws StackUnderFlowException{
        int x=-1;
        if(top==-1)
            throw new StackUnderFlowException();
        x=s[top];
        top--;
        return x;
    }
}

public class Main {
    public static void main(String[] args){
        Stack s=new Stack(5);
        try{
            s.push(10);
            s.push(8);
            s.push(9);
            s.push(10);
            s.push(8);
            s.push(9);
        }
        catch(StackOverFlowException st){
            System.out.println(st);
        }
        try{
            s.pop();
            s.pop();
            s.pop();
            s.pop();
            s.pop();
            s.pop();
        }
        catch(StackUnderFlowException f){
            System.out.println(f);
        }
    }
}
